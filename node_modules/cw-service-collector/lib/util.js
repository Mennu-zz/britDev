var fs = require('fs')
var path = require('path')

// see if the values in the config object are valid
exports.validateConfig = function(config) {

  if (config.mode == 'push' || config.mode == 'pull') {
    return [true]
  }
  else {
    return [false, 'mode should be either "push" or "pull"']
  }
}

// check if the service is running
exports.serviceIsRunning = function () {

  var pidFile = path.normalize(process.cwd() + '/' + '.pid')

  if (fs.existsSync(pidFile)) {

    var pid = fs.readFileSync(pidFile)

    try {
      process.kill(pid, 0)
      return true
    }
    catch (err) {
      return false
    }

  }
  else {
    return false
  }

}

// create controller config object from the controller file
exports.getConfigObject = function (filePath) {

  var configString
  var collectorMode // push or pull

  if (configString = getConfigString(fs.readFileSync(filePath).toString(), 'pull')) {
    collectorMode = 'pull'
  }
  else if (configString = getConfigString(fs.readFileSync(filePath).toString(), 'push')) {
    collectorMode = 'push'
  }

  //console.log(configString)

  if (configString) {

    var minified = stripComments(configString).replace(/\n/g, '')
    //console.log(minified)
    var config = fixUndefined(minified)

    function fixUndefined(objectString, subject) {

      if (subject) {
        objectString = objectString.replace(subject, '"'+ subject +'"')
      }

      try {
        return (new Function('return ' + objectString))()
      }
      catch (err) {
        console.log(err)
        if (err.message.indexOf('is not defined') > 0) {
          return fixUndefined(objectString, err.message.split(' ')[0])
        }
        else {
          throw new Error(err)
        }

      }

    }

    config.mode = collectorMode
    // console.log(config)

    return config

  }
  else {
    return {}
  }

}



function stripComments(str, opts) {

  var reBlock = /\/\*(?!\/)(.|[\r\n]|\n)+?\*\/\n?\n?/gm
  var reBlockIgnore = /\/\*(?!(\*?\/|\*?\!))(.|[\r\n]|\n)+?\*\/\n?\n?/gm
  var reLine = /(^|[^\S\n])(?:\/\/)([\s\S]+?)$/gm;
  var reLineIgnore = /(^|[^\S\n])(?:\/\/[^!])([\s\S]+?)$/gm;

  var strip = function(str, opts) {
    return str ? block(line(str, opts), opts) : '';
  }

  var block = function(str, opts) {
    opts = opts || {};
    var re = reBlock //new RegExp(reBlock + reBlockEnd, 'gm');
    if(opts.safe) {
      re = reBlockIgnore //new RegExp(reBlockIgnore + reBlockEnd, 'gm');
    }
    return str ? str.replace(re, '') : '';
  }

  var line = function(str, opts) {
    opts = opts || {};
    var re = reLine;
    if(opts.safe) {
      re = reLineIgnore;
    }
    return str ? str.replace(re, '') : '';
  }

  return strip(str, opts)

}

function getConfigString(code, type) {

  var left = 'Collector.'+ type +'('
  var right = ')'

  var startPos = code.indexOf(left);
  var endPos = code.indexOf(right, startPos + left.length);

  if (startPos > -1) {
    if (endPos == -1 && right != null) {
      return ''
    }
    else if (endPos == -1 && right == null) {
      return code.substring(startPos + left.length)
    }
    else {
      return code.slice(startPos + left.length, endPos);
    }
  }
  else {
    return ''
  }
}
